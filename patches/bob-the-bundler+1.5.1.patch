diff --git a/node_modules/bob-the-bundler/dist/commands/build.js b/node_modules/bob-the-bundler/dist/commands/build.js
index 277f120..305cc12 100644
--- a/node_modules/bob-the-bundler/dist/commands/build.js
+++ b/node_modules/bob-the-bundler/dist/commands/build.js
@@ -99,7 +99,7 @@ async function buildSingle({ distDir, distPath = '' }) {
         },
         {
             ...commonOutputOptions,
-            file: path_1.join(distDir, "index.mjs"),
+            file: path_1.join(distDir, "esm", "index.js"),
             format: "esm",
         },
     ];
@@ -108,6 +108,7 @@ async function buildSingle({ distDir, distPath = '' }) {
     }));
     // move README.md and LICENSE
     await copyToDist(cwd, ["README.md", "LICENSE"].concat((buildOptions === null || buildOptions === void 0 ? void 0 : buildOptions.copy) || []), exports.DIST_DIR + distPath);
+    fs_extra_1.default.writeFileSync(path_1.join(bobProjectDir, "esm", "package.json"), JSON.stringify({type: "module"}))
 }
 async function build({ packagePath, cwd, pkg, fullName, config, reporter, distDir, distPath = '', packageInfoList }) {
     var _a;
@@ -161,7 +162,7 @@ async function build({ packagePath, cwd, pkg, fullName, config, reporter, distDi
         },
         {
             ...commonOutputOptions,
-            file: path_1.join(bobProjectDir, "index.mjs"),
+            file: path_1.join(bobProjectDir, "esm", "index.js"),
             format: "esm",
         },
     ];
@@ -174,6 +175,7 @@ async function build({ packagePath, cwd, pkg, fullName, config, reporter, distDi
         await bundle.write(outputOptions);
     }));
     await Promise.all(declarations.map((file) => limit(() => fs_extra_1.default.copy(path_1.join(distProjectSrcDir, file), path_1.join(bobProjectDir, file)))));
+    fs_extra_1.default.writeFileSync(path_1.join(bobProjectDir, "esm", "package.json"), JSON.stringify({type: "module"}))
     if (buildOptions === null || buildOptions === void 0 ? void 0 : buildOptions.bin) {
         await Promise.all(Object.keys(buildOptions.bin).map(async (alias) => {
             const options = buildOptions.bin[alias];
@@ -245,7 +247,7 @@ function rewritePackageJson(pkg, distPath) {
     });
     newPkg.name += distPath;
     newPkg.main = "index.js";
-    newPkg.module = "index.mjs";
+    newPkg.module = "esm/index.js";
     newPkg.typings = "index.d.ts";
     newPkg.typescript = {
         definition: newPkg.typings,
@@ -253,11 +255,11 @@ function rewritePackageJson(pkg, distPath) {
     newPkg.exports = {
         ".": {
             require: "./index.js",
-            import: "./index.mjs",
+            import: "./esm/index.js",
         },
         "./*": {
             require: "./*.js",
-            import: "./*.mjs",
+            import: "./esm/*.js",
         },
     };
     if (pkg.bin) {
@@ -276,13 +278,13 @@ function validatePackageJson(pkg) {
         }
     }
     expect("main", `${exports.DIST_DIR}/index.js`);
-    expect("module", `${exports.DIST_DIR}/index.mjs`);
+    expect("module", `${exports.DIST_DIR}/esm/index.js`);
     expect("typings", `${exports.DIST_DIR}/index.d.ts`);
     expect("typescript.definition", `${exports.DIST_DIR}/index.d.ts`);
     expect("exports['.'].require", `./${exports.DIST_DIR}/index.js`);
-    expect("exports['.'].import", `./${exports.DIST_DIR}/index.mjs`);
+    expect("exports['.'].import", `./${exports.DIST_DIR}/esm/index.js`);
     expect("exports['./*'].require", `./${exports.DIST_DIR}/*.js`);
-    expect("exports['./*'].import", `./${exports.DIST_DIR}/*.mjs`);
+    expect("exports['./*'].import", `./${exports.DIST_DIR}/esm/*.js`);
 }
 exports.validatePackageJson = validatePackageJson;
 async function copyToDist(cwd, files, distDir) {
